<full-text-retrieval-response xmlns="http://www.elsevier.com/xml/svapi/article/dtd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:prism="http://prismstandard.org/namespaces/basic/2.0/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:tb="http://www.elsevier.com/xml/common/table/dtd" xmlns:sb="http://www.elsevier.com/xml/common/struct-bib/dtd" xmlns:sa="http://www.elsevier.com/xml/common/struct-aff/dtd" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:ja="http://www.elsevier.com/xml/ja/dtd" xmlns:ce="http://www.elsevier.com/xml/common/dtd" xmlns:cals="http://www.elsevier.com/xml/common/cals/dtd" xmlns:bk="http://www.elsevier.com/xml/bk/dtd"><coredata><prism:url>http://api.elsevier.com/content/article/pii/S2212667812000032</prism:url><dc:identifier>doi:10.1016/j.ieri.2012.06.002</dc:identifier><eid>1-s2.0-S2212667812000032</eid><prism:doi>10.1016/j.ieri.2012.06.002</prism:doi><pii>S2212-6678(12)00003-2</pii><dc:title>The Research of Automated Select Test Cases for Aspect-oriented Software </dc:title><prism:publicationName>IERI Procedia</prism:publicationName><prism:aggregationType>Journal</prism:aggregationType><prism:issn>22126678</prism:issn><prism:volume>1</prism:volume><prism:startingPage>2</prism:startingPage><prism:endingPage>7</prism:endingPage><prism:pageRange>2-7</prism:pageRange><dc:format>text/xml</dc:format><prism:coverDate>2012-12-31</prism:coverDate><prism:coverDisplayDate>2012</prism:coverDisplayDate><prism:copyright>Copyright © 2012 Published by Elsevier B.V.</prism:copyright><prism:publisher>Published by Elsevier B.V.</prism:publisher><prism:issueName>2012 International Conference on Mechanical, Industrial, and Manufacturing Engineering, Singapore, June 27-28, 2012</prism:issueName><dc:creator>wang, Peng</dc:creator><dc:creator>Zhao, Xiaochun</dc:creator><dc:description>AbstractAspect-oriented Programming (AOP) can well solve the cross-cutting concerns. Because of the different features of aspect, AOP requires new techniques for testing. First, this paper proposes a model to test aspect-oriented software. In order to support the testing model of the first three steps, we propose the algorithm of selecting aspect relevant test cases. Then, we develop a new tool to implement the theoretical of automating select test case. Finally, a case of the Bank Account System is studied to illustrate our testing approach.</dc:description><openaccess>1</openaccess><openaccessArticle>true</openaccessArticle><openaccessType>Full</openaccessType><openArchiveArticle>false</openArchiveArticle><openaccessSponsorName/><openaccessSponsorType>ElsevierWaived</openaccessSponsorType><openaccessUserLicense>http://creativecommons.org/licenses/by-nc-nd/3.0/</openaccessUserLicense><dcterms:subject>Aspect-oriented programming</dcterms:subject><dcterms:subject>software atomated testing</dcterms:subject><dcterms:subject>test case relevant to aspect</dcterms:subject><link rel="self" href="http://api.elsevier.com/content/article/pii/S2212667812000032"/><link rel="scidir" href="http://www.sciencedirect.com/science/article/pii/S2212667812000032"/></coredata><scopus-id>84863297448</scopus-id><scopus-eid>2-s2.0-84863297448</scopus-eid><link rel="abstract" href="http://api.elsevier.com/content/abstract/scopus_id/84863297448"/><originalText><xocs:doc xmlns:xoe="http://www.elsevier.com/xml/xoe/dtd" xsi:schemaLocation="http://www.elsevier.com/xml/xocs/dtd http://be-prod3a/schema/dtds/document/fulltext/xcr/xocs-article.xsd"><xocs:meta><xocs:content-family>serial</xocs:content-family><xocs:content-type>JL</xocs:content-type><xocs:cid>282178</xocs:cid><xocs:ssids><xocs:ssid type="alllist">291210</xocs:ssid><xocs:ssid type="subj">291773</xocs:ssid><xocs:ssid type="subj">291800</xocs:ssid><xocs:ssid type="subj">291880</xocs:ssid><xocs:ssid type="subj">291882</xocs:ssid><xocs:ssid type="content">31</xocs:ssid><xocs:ssid type="oa">90</xocs:ssid></xocs:ssids><xocs:srctitle>IERI Procedia</xocs:srctitle><xocs:normalized-srctitle>IERIPROCEDIA</xocs:normalized-srctitle><xocs:orig-load-date yyyymmdd="20120725">2012-07-25</xocs:orig-load-date><xocs:available-online-date yyyymmdd="20120823">2012-08-23</xocs:available-online-date><xocs:ew-transaction-id>2014-11-08T18:32:30</xocs:ew-transaction-id><xocs:eid>1-s2.0-S2212667812000032</xocs:eid><xocs:pii-formatted>S2212-6678(12)00003-2</xocs:pii-formatted><xocs:pii-unformatted>S2212667812000032</xocs:pii-unformatted><xocs:doi>10.1016/j.ieri.2012.06.002</xocs:doi><xocs:item-stage>S300</xocs:item-stage><xocs:item-version-number>S300.2</xocs:item-version-number><xocs:item-weight>HEAD-AND-TAIL</xocs:item-weight><xocs:hub-eid>1-s2.0-S2212667812X00029</xocs:hub-eid><xocs:timestamp yyyymmdd="20150515">2015-05-15T07:34:50.756359-04:00</xocs:timestamp><xocs:dco>0</xocs:dco><xocs:tomb>0</xocs:tomb><xocs:date-search-begin>20120101</xocs:date-search-begin><xocs:date-search-end>20121231</xocs:date-search-end><xocs:year-nav>2012</xocs:year-nav><xocs:indexeddate epoch="1343174400">2012-07-25T00:00:00Z</xocs:indexeddate><xocs:articleinfo>rawtext articleinfo articletitlenorm authfirstinitialnorm authfirstsurnamenorm cid cids confeditor contenttype copyright crossmark dateloaded dateloadedtxt datesearch datesort dateupdated dco docsubtype doctype doi eid ewtransactionid hubeid indexeddate issn issnnorm itemstage itemtransactionid itemweight oauserlicense openaccess openarchive pg pgfirst pglast pii piinorm pubdateend pubdatestart pubdatetxt pubyr sortorder srctitle srctitlenorm srctype ssids alllist content oa subj suppl tomb vol volfirst volissue volumelist webpdf webpdfpagecount yearnav affil articletitle auth authfirstini authfull authkeywords authlast primabst ref</xocs:articleinfo><xocs:issns><xocs:issn-primary-formatted>2212-6678</xocs:issn-primary-formatted><xocs:issn-primary-unformatted>22126678</xocs:issn-primary-unformatted></xocs:issns><xocs:crossmark is-crossmark="0">false</xocs:crossmark><xocs:vol-first>1</xocs:vol-first><xocs:volume-list><xocs:volume>1</xocs:volume></xocs:volume-list><xocs:suppl>C</xocs:suppl><xocs:vol-iss-suppl-text>Volume 1</xocs:vol-iss-suppl-text><xocs:sort-order>2</xocs:sort-order><xocs:first-fp>2</xocs:first-fp><xocs:last-lp>7</xocs:last-lp><xocs:pages><xocs:first-page>2</xocs:first-page><xocs:last-page>7</xocs:last-page></xocs:pages><xocs:cover-date-orig><xocs:start-date>2012</xocs:start-date></xocs:cover-date-orig><xocs:cover-date-text>2012</xocs:cover-date-text><xocs:cover-date-start>2012-01-01</xocs:cover-date-start><xocs:cover-date-end>2012-12-31</xocs:cover-date-end><xocs:cover-date-year>2012</xocs:cover-date-year><xocs:title-editors-groups><xocs:title-editors-group><ce:title>2012 International Conference on Mechanical, Industrial, and Manufacturing Engineering, Singapore, June 27-28, 2012</ce:title><ce:editors><ce:author-group><ce:author><ce:degrees>Dr</ce:degrees><ce:given-name>Garry</ce:given-name><ce:surname>Lee</ce:surname></ce:author></ce:author-group></ce:editors></xocs:title-editors-group></xocs:title-editors-groups><xocs:document-type>article</xocs:document-type><xocs:document-subtype>fla</xocs:document-subtype><xocs:copyright-line>Copyright © 2012 Published by Elsevier B.V.</xocs:copyright-line><xocs:normalized-article-title>RESEARCHAUTOMATEDSELECTTESTCASESFORASPECTORIENTEDSOFTWARE</xocs:normalized-article-title><xocs:normalized-first-auth-surname>WANG</xocs:normalized-first-auth-surname><xocs:normalized-first-auth-initial>P</xocs:normalized-first-auth-initial><xocs:references><xocs:ref-info refid="bib0005"><xocs:ref-normalized-surname>KICZALES</xocs:ref-normalized-surname><xocs:ref-pub-year>1997</xocs:ref-pub-year><xocs:ref-first-fp>220</xocs:ref-first-fp><xocs:ref-last-lp>242</xocs:ref-last-lp><xocs:ref-normalized-initial>G</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib0010"/><xocs:ref-info refid="bib0015"/><xocs:ref-info refid="bib0020"/><xocs:ref-info refid="bib0025"/><xocs:ref-info refid="bib0030"/><xocs:ref-info refid="bib0035"/></xocs:references><xocs:refkeys><xocs:refkey3>WANGX2012X2</xocs:refkey3><xocs:refkey4lp>WANGX2012X2X7</xocs:refkey4lp><xocs:refkey4ai>WANGX2012X2XP</xocs:refkey4ai><xocs:refkey5>WANGX2012X2X7XP</xocs:refkey5></xocs:refkeys><xocs:open-access><xocs:oa-article-status is-open-access="1" is-open-archive="0">Full</xocs:oa-article-status><xocs:oa-access-effective-date>2013-07-16T11:19:37Z</xocs:oa-access-effective-date><xocs:oa-sponsor><xocs:oa-sponsor-type>ElsevierWaived</xocs:oa-sponsor-type></xocs:oa-sponsor><xocs:oa-user-license>http://creativecommons.org/licenses/by-nc-nd/3.0/</xocs:oa-user-license><xocs:oa-access-inherited-from winid="http://vtw.elsevier.com/content/oaw/GEN_UNBOUNDED_ESWaived">OA-Window</xocs:oa-access-inherited-from></xocs:open-access><xocs:attachment-metadata-doc><xocs:attachment-set-type>item</xocs:attachment-set-type><xocs:pii-formatted>S2212-6678(12)00003-2</xocs:pii-formatted><xocs:pii-unformatted>S2212667812000032</xocs:pii-unformatted><xocs:eid>1-s2.0-S2212667812000032</xocs:eid><xocs:doi>10.1016/j.ieri.2012.06.002</xocs:doi><xocs:cid>282178</xocs:cid><xocs:timestamp>2014-11-08T16:09:28.042902-05:00</xocs:timestamp><xocs:cover-date-start>2012-01-01</xocs:cover-date-start><xocs:cover-date-end>2012-12-31</xocs:cover-date-end><xocs:attachments><xocs:web-pdf><xocs:attachment-eid>1-s2.0-S2212667812000032-main.pdf</xocs:attachment-eid><xocs:ucs-locator>https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S2212667812000032/MAIN/application/pdf/289e5fdb1c033dc36510960a15cbacc4/main.pdf</xocs:ucs-locator><xocs:ucs-locator>https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S2212667812000032/MAIN/application/pdf/289e5fdb1c033dc36510960a15cbacc4/main.pdf</xocs:ucs-locator><xocs:filename>main.pdf</xocs:filename><xocs:extension>pdf</xocs:extension><xocs:pdf-optimized>true</xocs:pdf-optimized><xocs:filesize>306294</xocs:filesize><xocs:web-pdf-purpose>MAIN</xocs:web-pdf-purpose><xocs:web-pdf-page-count>6</xocs:web-pdf-page-count><xocs:web-pdf-images><xocs:web-pdf-image><xocs:attachment-eid>1-s2.0-S2212667812000032-main_1.png</xocs:attachment-eid><xocs:ucs-locator>https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S2212667812000032/PREVIEW/image/png/281ea182c1deed06b29753483985768c/main_1.png</xocs:ucs-locator><xocs:ucs-locator>https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S2212667812000032/PREVIEW/image/png/281ea182c1deed06b29753483985768c/main_1.png</xocs:ucs-locator><xocs:filename>main_1.png</xocs:filename><xocs:extension>png</xocs:extension><xocs:filesize>41313</xocs:filesize><xocs:pixel-height>849</xocs:pixel-height><xocs:pixel-width>656</xocs:pixel-width><xocs:attachment-type>IMAGE-WEB-PDF</xocs:attachment-type><xocs:pdf-page-num>1</xocs:pdf-page-num></xocs:web-pdf-image></xocs:web-pdf-images></xocs:web-pdf></xocs:attachments></xocs:attachment-metadata-doc></xocs:meta><xocs:rawtext> IERI Procedia   1  ( 2012 )  2 â€“ 7  2212-6678  2012 Published by Elsevier B.V. Selection and peer review under responsibility of Information Engineering Research Institute  doi: 10.1016/j.ieri.2012.06.002    2012 2nd International Conference on Mechanical, Industrial, and Manufacturing  Engineering  The Research of Automated Select Test Cases for  Aspect-oriented Software  Peng wang a,* , xiaochun zhao b   a peng wang, changchun university of science and technology, Changchun City 130022, China  b xiaochun zhao, changchun university of science and technology, Changchun City 130022, China     Abstract  Aspect-oriented Programming (AOP) can well solve the cross-cutting concerns. Because of the different  features of aspect, AOP requires new techniques for testing. First, this paper proposes a model to test aspect- oriented software. In order to support the testing model of the first three steps, we propose the algorithm of  selecting aspect relevant test cases. Then, we develop a new tool to implement the theoretical of automating  select test case. Finally, a case of the Bank Account System is studied to illustrate our testing approach.    Â© 2012 Published by Elsevier B.V.  Selection and peer review under responsibility of Information Engineering Research Institute    Keywords: Aspect-oriented programming; software atomated testing; test case relevant to aspect  1. Introduction  1.1 Overview  Last century Object-oriented Programming (OOP) has achieved the success in developing software.      * Corresponding author. Tel.: +0-130-891-16010;.  E-mail address: wpeng@cust.edu.cn xiaochun0616@163.com.   2012 Published by Elsevier B.V. Open access under CC BY-NC-ND license. Open access under CC BY-NC-ND license. 3 Peng wang and xiaochun zhao /  IERI Procedia  1 ( 2012 )  2 â€“ 7    However, with the widely used distributed system in Internet, the final users also highly demand non- functional requirements, such as security, robustness. Then, the shortcomings of OOP exposed. There are  codes tangling or code scattering issues. To address these issues, Xerox Palo Alto Research Center (Xerox  PARC) proposed Aspect-oriented Programming (AOP) in 1997 [1]. It is the supplement for OOP, and allows  programmers to design functional and non-functional requirements separately [2]. Software testing is an  indispensable step in the process of software development. Because of the immaturity of aspect-oriented  software development [3], testing for aspect-oriented software is necessary.  1.2 Organization of paper  The organization of this paper is in the following. In the second section, we give the testing approach for  AOP. The testing model is consists of four steps, and combine the algorithm of selecting aspect relevant test  cases. In the third section, we develop a new tool that supports the testing model in Eclipse environment. In  the forth section, in order to prove the practicality of our tool, we apply it in a Bank Account System, and  describe the detail testing approach.  2.  An approach for select relevant test cases  2.1 An Initial model for testing aspect-oriented software  We will introduce an approach which tests aspects in AOP in this section. This approach consists of class  testing, unit testing, integration testing, and system testing. On the basis of standard testing technology, our  testing aspects approach applies a new algorithm that is about to select test cases. The testing steps are shown  in Figure 1.     Fig. 1. the testing model of Aspect-oriented software    Class Testing.      There are two elements for AOP, regular classes and aspect. In this step, we develop test cases and test  regular classes. The purpose of testing regular classes before testing aspects is to get rid of errors which  have no relationship with aspects. In the testing processes, we can use standard testing techniques in this  step, and those developed test cases can be reused in future.    4   Peng wang and xiaochun zhao /  IERI Procedia  1 ( 2012 )  2 â€“ 7     Unit Testing.     In this step, unit testing is separately woven with all of regular classes for each aspect. Then, we consider  the woven result as a small standalone application and test the application. During the design stage, if  every aspect is supposed to deal with a cross-cutting concern, we can test every single aspect without  interference. In the unit testing process, test cases not only invoke regular classes, but also invoke advices  of aspects. If it is necessary, we should develop new test cases.     Integration Testing.      In this step, all of regular classes are woven together with multiple aspects, to get a bigger and more  complex dynamic application. During the testing processes, we can use incremental testing [4], the number  of woven aspects increase gradually. Every increment only contains limited aspects. The purpose of  integration testing is to find the errors among the interacted aspects.     System Testing.      In the final step, all of regular classes are woven together with all of aspects to form the whole system, and  the final system is tested with the traditional system testing technologies. This step not only reuses the test  cases developed in previous steps, but also needs to develop new test cases to assure the system  performance.  2.2 Select test cases relevant to an aspect algorithm  In this section we will describe an algorithm which is to identify relevant test cases to an aspect. First, we  give the definition of aspect relevant test cases. Second, base on the given definition, we describe the  algorithm detailed, and give the algorithm step in Figure 2 as follows.  Definition (Test Cases Relevant to Aspect): Executing a test case t, if it results in the execution of any  advice in the aspect A, then t is relevant to A.  We describe the algorithm that justification a set of test cases that use relevant to a tested aspect.    Fig. 2. The algorithm of select aspect relevant test cases   Input: A set of test cases, the tested aspect.   Output of the algorithm: The subset of test cases relevant to the aspect.   We constitute a relation; named .  saves the relationship which is from aspects to classes, called â€œadviseâ€�  relationship. In â€œadviseâ€� relationship, the domain is advices of the tested aspect, and the ranges is the  methods of classes. For every pointed advice a in the aspect A, we need to check every method m of every  class C. If a advises m, we record the relation as the pair (A.a , C.m), and put this pair into the relation .  5 Peng wang and xiaochun zhao /  IERI Procedia  1 ( 2012 )  2 â€“ 7     We constitute a relation; named .  saves the relationship which is from test cases to methods of classes  that the test case invokes. In this relationship, the domain is the test cases, and the range is the methods of  the classes. For every test case t, we need to check every method m of a class C. If t invokes m, we put the  pair (t, C.m) into the relation .   Now we need to build an auxiliary relation, named .  saves the relationship between an advice in an  aspect and a method in a class, called â€œadvise byâ€�.  is the reverse of . In this relationship, the domain is  the methods in the classes, and the range is the advice in the aspects. With the relation , we find all  methods for each element of the input test cases set. With the relation , we find all of advices which  advise every found method. If these found advices are included in the tested aspect, we put the test case  into the output set.    Finally, the output set contains all of relevant test case. Considering from time complexity, it is O (amt),  where a is the quantity of advice, m is the quantity of methods, and t is the quantity of test cases.  3. Automated Testing Tool  The main functions of the tool are selecting test case and executing aspect relevant to test cases. We  implement the tool in Eclipse environment [5]. In Eclipse the weaving result can be accessed  programmatically, so the relationships between regular classes and aspects can be retrieved. Eclipse supports  the retrieval in the form of interfaces. On the basis of these interfaces, we contribute the relations  and  of  the algorithm. With another open source of Java library, barat [6], we build the relation . In barat  environment, we can analyze the byte code of test case manually, and find testing framework which support  for creating test cases, executing them, and detecting errors. JUnit is just fit into it in Java environment, so we  choose JUnit as writing and executing test cases [7].   With the help of the tool, we can write test cases for all of regular classes. Then, we use the tool to select  test cases relevant to aspects and execute those test cases to detect potential errors in the aspect-oriented  system.  4.  Case Study   Now, we use our automated testing tool in the Bank Account System, and show how effective of our tool  in testing aspect-oriented system.   4.1 Case Introduction    Fig. 3. Class diagram of Band Account System  The system has two classes; the class diagram is shown as Figure 3. Account class has the basic  information and operation of a bank account. In AccountTransferSystem class, there is only one method,  which happens between two different accounts and debts from one account to another.  6   Peng wang and xiaochun zhao /  IERI Procedia  1 ( 2012 )  2 â€“ 7    The Bank Account System is a high security requirement system. We should be checked the security  before the execution of some methods that are related to account balance. We will describe the security   aspect for an instance. The definition of the security aspect is listed as follows.  public aspect SecurityAspect   {    protected pointcut securityPC( )        :(execution(public * Account.*(..)))  &amp;&amp;  !( execution(public * Account.creditRating(..))))   before() : securityPC () { try { // Safety certification.} catch (LoginException ex) {â€¦â€¦}}}    In the definition mentioned above, there is a point cut, named securityPC, which defines the join points  relevant to security. execution(public * Account.*(..)), this sentence points the join points. The security aspect  defines a before advice. before() : securityPC () means that the advice is associated with securityPC point cut.  The body of the advice touches off the security method.  4.2 Case Testing  We apply the tool to test the Bank Account System. During the testing processes, we use the testing model  and do the testing in four steps.   Develop Test Cases.     In this step, we develop a set of test cases for all of regular classes. All of test cases are automated  developed by JUnit framework, so the names of test cases method are unified, begin with test.    Testing Each Aspect     In this step, every aspect is woven into the classes. On the one hand, the tool can help us to identify the  test cases that are relevant to the aspect. For example, security aspect advises the debt method in Account  class, and the test case testDebt invokes the method, so the test case testDebt is relevant to security aspect.  On the other hand, the test cases relevant to security aspect canâ€™t test the aspect completely. For example,  the security aspect advises the transerOp method in AccountTransferSystem, but there are any test cases to  test it. It is necessary to develop new test case to support it. In order to express the relationship of regular  classes, aspects and test cases distinctly, we give the relationships picture in Figure 4. The dashed lines  describe the advice relations, and the solid lines point out the invocation relations.    Fig. 4.  Relations of methods, aspects and test cases   Integration Testing.      We weave the whole system and select the test cases relevant to both security aspect and transaction  aspect by the tool. In our case, the debt method in Account class is advised by the two aspects, and the test  case testDebt invokes the debt method, so the test case testDebt is selected. Third, we execute the test cases  and test the integration.  7 Peng wang and xiaochun zhao /  IERI Procedia  1 ( 2012 )  2 â€“ 7     System Testing.      At present, regular classes and aspects are woven together and form a complete system, and then we do the  testing as the standard testing processes. This section explains the tool can help the tester. It not only  reduces the cost of testing AOP, but also improves the testing efficiency.  5. Conclusion  On the basis of the character of aspect, this paper proposes a testing model which consists of four steps to  test the aspect-oriented software. We propose the algorithm of selecting aspect relevant test cases, and give  the detail description. Then we develop a tool that supports the above theoretical and apply it for a case.   References  [1] Kiczales, G., et al. Aspect-Oriented Programming. in Proceedings of 11th European Conference on  Object-Oriented Programming, p.220-42, 1997.  [2] Laddad, R., Aspectj in Action: Practical Aspect-Oriented Programming. 2003: Manning Publications Co.  [3] M. Rinard,A. Salcianu,and S.Bugrara. A classification system and analysis for aspect-oriented programs.  InProc.12thInternational Symposium on the Foundations of Software Engineering, pages 147â€“158, 2004.  [4] Lionel C. Briand, Jie Feng, Yvan Labiche. Using genetic algorithms and coupling measures to devise  optimal integration test orders. Proceeding SEKE '02 Proceedings of the 14th international conference  on Software engineering and knowledge engineering.  [5] Eclipse, http://www.eclipse.org.  [6] Barat, http://sourceforge.net/projects/barat.  [7] Junit, http://www.junit.org.   account balance. We will describe the security   aspect for an instance. The definition of the security aspect is listed as follows.  public aspect SecurityAspect   {    protected pointcut securityPC( )        :(execution(public * Account.*(..)))  &amp;&amp;  !( execution(public * Account.creditRating(..))))   before() : securityPC () { try { // Safety certification.} catch (LoginException ex) {â€¦â€¦}}}    In the definition mentioned above, there is a point cut, named securityPC, which defines the join points  relevant to security. execution(public * Account.*(..)), this sentence points the join points. The security aspect  defines a before advice. before() : securityPC () means that the advice is associated with securityPC point cut.  The body of the advice touches off the security method.  4.2 Case Testing  We apply the tool to test the Bank Account System. During the testing processes, we use the testing model  and do the testing in four steps.   Develop Test Cases.     In this step, we develop a set of test cases for all of regular classes. All of test cases are automated  developed by JUnit framework, so the names of test cases method are unified, begin with test.    Testing Each Aspect     In this step, every aspect is woven into the classes. On the one hand, the tool can help us to identify the  test cases that are relevant to the aspect. For example, security aspect advises the debt method in Account  class, and the test case testDebt invokes the method, so the test case testDebt is relevant to security aspect.  On the other hand, the test cases relevant to security aspect canâ€™t test the aspect completely. For example,  the security aspect advises the transerOp method in AccountTransferSystem, but there are any test cases to  test it. It is necessary to develop new test case to support it. In order to express the relationship of regular  classes, aspects and test cases distinctly, we give the relationships picture in Figure 4. The dashed lines  describe the advice relations, and the solid lines point out the invocation relations.    Fig. 4.  Relations of methods, aspects and test cases   Integration Testing.      We weave the whole system and select the test cases relevant to both security aspect and transaction  aspect by the tool. In our case, the debt method in Account class is advised by the two aspects, and the test  case testDebt invokes the debt method, so the test case testDebt is selected. Third, we execute the test cases  and test the integration.  7 Peng wang and xiaochun zhao /  IERI Procedia  1 ( 2012 )  2 â€“ 7     System Testing.      At present, regular classes and aspects are woven together and form a complete system, and then we do the  testing as the stan</xocs:rawtext><xocs:serial-item><article xmlns="http://www.elsevier.com/xml/ja/dtd" version="5.1" xml:lang="en" docsubtype="fla"><item-info><jid>IERI</jid><aid>2</aid><ce:pii>S2212-6678(12)00003-2</ce:pii><ce:doi>10.1016/j.ieri.2012.06.002</ce:doi><ce:copyright type="unknown" year="2012"/></item-info><head><ce:title>The Research of Automated Select Test Cases for Aspect-oriented Software</ce:title><ce:author-group><ce:author><ce:given-name>Peng</ce:given-name><ce:surname>wang</ce:surname><ce:cross-ref refid="aff0005"><ce:sup loc="post">a</ce:sup></ce:cross-ref><ce:cross-ref refid="cor0005"><ce:sup loc="post">⁎</ce:sup></ce:cross-ref><ce:e-address type="email">wpeng@cust.edu.cn</ce:e-address></ce:author><ce:author><ce:given-name>Xiaochun</ce:given-name><ce:surname>Zhao</ce:surname><ce:cross-ref refid="aff0010"><ce:sup loc="post">b</ce:sup></ce:cross-ref><ce:e-address type="email">xiaochun0616@163.Com</ce:e-address></ce:author><ce:affiliation id="aff0005"><ce:label>a</ce:label><ce:textfn>peng wang, changchun university of science and technology, Changchun City 130022, China</ce:textfn></ce:affiliation><ce:affiliation id="aff0010"><ce:label>b</ce:label><ce:textfn>xiaochun zhao, changchun university of science and technology, Changchun City 130022, China</ce:textfn></ce:affiliation><ce:correspondence id="cor0005"><ce:label>⁎</ce:label><ce:text>Corresponding author. Tel.: +0 130 891 16010.</ce:text></ce:correspondence></ce:author-group><ce:abstract class="author"><ce:section-title>Abstract</ce:section-title><ce:abstract-sec><ce:simple-para id="spar0005" view="all">Aspect-oriented Programming (AOP) can well solve the cross-cutting concerns. Because of the different features of aspect, AOP requires new techniques for testing. First, this paper proposes a model to test aspect-oriented software. In order to support the testing model of the first three steps, we propose the algorithm of selecting aspect relevant test cases. Then, we develop a new tool to implement the theoretical of automating select test case. Finally, a case of the Bank Account System is studied to illustrate our testing approach.</ce:simple-para></ce:abstract-sec></ce:abstract><ce:keywords class="keyword"><ce:section-title>Keywords</ce:section-title><ce:keyword><ce:text>Aspect-oriented programming</ce:text></ce:keyword><ce:keyword><ce:text>software atomated testing</ce:text></ce:keyword><ce:keyword><ce:text>test case relevant to aspect</ce:text></ce:keyword></ce:keywords></head><tail view="all"><ce:bibliography id="bibl0005" view="all"><ce:section-title>References</ce:section-title><ce:bibliography-sec id="bibs0005"><ce:bib-reference id="bib0005"><ce:label>[1]</ce:label><sb:reference><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Kiczales</ce:surname></sb:author><sb:et-al/></sb:authors></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Aspect-Oriented Programming. in Proceedings of 11th European Conference on Object-Oriented Programming</sb:maintitle></sb:title></sb:series><sb:date>1997</sb:date></sb:issue><sb:pages><sb:first-page>220</sb:first-page><sb:last-page>242</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0010"><ce:label>[2]</ce:label><ce:other-ref><ce:textref>Laddad, R., Aspectj in Action: Practical Aspect-Oriented Programming 2003: Manning Publications Co.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="bib0015"><ce:label>[3]</ce:label><ce:other-ref><ce:textref>M. Rinard,A. Salcianu,and S. Bugrara. A classification system and analysis for aspect-oriented programs. InProc.12thInternational Symposium on the Foundations of Software Engineering, pages 147-158, 2004.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="bib0020"><ce:label>[4]</ce:label><ce:other-ref><ce:textref>Lionel C. Briand, Jie Feng, Yvan Labiche. Using genetic algorithms and coupling measures to devise optimal integration test orders. Proceeding SEKE’02 Proceedings of the 14th international conference on Software engineering and knowledge engineering.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="bib0025"><ce:label>[5]</ce:label><ce:other-ref><ce:textref>Eclipse, http://www.eclipse.org.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="bib0030"><ce:label>[6]</ce:label><ce:other-ref><ce:textref>Barat, http://sourceforge.net/projects/barat.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="bib0035"><ce:label>[7]</ce:label><ce:other-ref><ce:textref>Junit, http://www.junit.org.</ce:textref></ce:other-ref></ce:bib-reference></ce:bibliography-sec></ce:bibliography></tail></article></xocs:serial-item></xocs:doc></originalText></full-text-retrieval-response>