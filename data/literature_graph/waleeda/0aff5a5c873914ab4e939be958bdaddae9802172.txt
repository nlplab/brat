Title: Unsupervised POS Induction with Word Embeddings

Abstract: Unsupervised word embeddings have been shown to be valuable as features in supervised learning problems; however, their role in un-supervised problems has been less thoroughly explored. In this paper, we show that embed-dings can likewise add value to the problem of unsupervised POS induction. In two representative models of POS induction, we replace multinomial distributions over the vocabulary with multivariate Gaussian distributions over word embeddings and observe consistent improvements in eight languages. We also analyze the effect of various choices while inducing word embeddings on " downstream " POS induction results.

Content: Introduction

Unsupervised POS induction is the problem of assigning word tokens to syntactic categories given only a corpus of untagged text. In this paper we explore the effect of replacing words with their vector space embeddings 1 in two POS induction models: the classic first-order HMM (Kupiec, 1992) and the newly introduced conditional random field autoencoder (Ammar et al., 2014). In each model, instead of using a conditional multinomial distribution 2 to generate a word token w i ∈ V given a POS tag t i ∈ T , we use a conditional Gaussian distribution and generate a d-dimensional word embedding v w i ∈ R d given t i .

1

Unlike Yatbaz et al. (2014), we leverage easily obtainable and widely used embeddings of word types. 2 Also known as a categorical distribution. Our findings suggest that, in both models, substantial improvements are possible when word embeddings are used rather than opaque word types. However, the independence assumptions made by the model used to induce embeddings strongly determines its effectiveness for POS induction: embedding models that model short-range context are more effective than those that model longer-range contexts. This result is unsurprising, but it illustrates the lack of an evaluation metric that measures the syntactic (rather than semantic) information in word embeddings. Our results also confirm the conclusions of Sirts et al. (2014) who were likewise able to improve POS induction results, albeit using a custom clustering model based on the the distancedependent Chinese restaurant process (Blei and Frazier , 2011). Our contributions are as follows: (i) reparameterization of token-level POS induction models to use word embeddings; and (ii) a systematic evaluation of word embeddings with respect to the syntactic information they contain.

Vector Space Word Embeddings

Word embeddings represent words in a language's vocabulary as points in a d-dimensional space such that nearby words (points) are similar in terms of their distributional properties. A variety of techniques for learning embeddings have been proposed, e.g., matrix factorization (Deerwester et al., 1990; Dhillon et al., 2011) and neural language modeling (Mikolov et al., 2011; Collobert and Weston, 2008). For the POS induction task, we specifically need embeddings that capture syntactic similarities. arXiv:1503.06760v1 [cs.CL] 23 Mar 2015 Therefore we experiment with two types of embeddings that are known for such properties: • Skip-gram embeddings (Mikolov et al., 2013) are based on a log bilinear model that predicts an unordered set of context words given a target word. Bansal et al. (2014) found that smaller context window sizes tend to result in embeddings with more syntactic information. We confirm this finding in our experiments. • Structured skip-gram embeddings (Ling et al., 2015) extend the standard skip-gram embeddings (Mikolov et al., 2013) by taking into account the relative positions of words in a given context. We use the tool word2vec 3 and Ling et al. (2015)'s modified version 4 to generate both plain and structured skip-gram embeddings in nine languages.

Models for POS Induction

In this section, we briefly review two classes of models used for POS induction (HMMs and CRF autoencoders), and explain how to generate word embedding observations in each class. We will represent a sentence of length as w = w 1 , w 2 , . . . , w ∈ V and a sequence of tags as t = t 1 , t 2 , . . . , t ∈ T . The embeddings of word type w ∈ V will be written as v w ∈ R d .

Hidden Markov Models

The hidden Markov model with multinomial emissions is a classic model for POS induction. This model makes the assumption that a latent Markov process with discrete states representing POS categories emits individual words in the vocabulary according to state (i.e., tag) specific emission distributions . An HMM thus defines the following joint distribution over sequences of observations and tags: p(w, t) = i=1 p(t i | t i−1 ) × p(w i | t i ) (1) where distributions p(t i | t i−1 ) represents the transition probability and p(w i | t i ) is the emission probability , the probability of a particular tag generating the word at position i. 5 We consider two variants of the HMM as base- lines: • p(w i | t i ) is parameterized as a " na¨ıve multinomial " distribution with one distinct parameter for each word type. • p(w i | t i ) is parameterized as a multinomial logistic regression model with hand-engineered features as detailed in (Berg-Kirkpatrick et al., 2010). Gaussian Emissions. We now consider incorporating word embeddings in the HMM. Given a tag t ∈ T , instead of generating the observed word w ∈ V , we generate the (pre-trained) embedding v w ∈ R d of that word. The conditional probability density assigned to v w | t follows a multivariate Gaussian distribution with mean µ t and covariance matrix Σ t : p(v w ; µ t , Σ t ) = exp − 1 2 (v w − µ t ) Σ −1 t (v w − µ t ) (2π) d |Σ t | (2) This parameterization makes the assumption that embeddings of words which are often tagged as t are concentrated around some point µ t ∈ R d , and the concentration decays according to the covariance matrix Σ t . 6 Now, the joint distribution over a sequence of observations v = v w 1 , v w 2 . . . , v w (which corresponds to word sequence w = w 1 , w 2 , . . . , w , ) and a tag sequence t = t 1 , t 2 . . . , t becomes: p(v, t) = i=1 p(t i | t i−1 ) × p(v w i ; µ t i , Σ t i ) We use the Baum–Welch algorithm to fit the µ t and Σ t i parameters. In every iteration, we update µ t * as follows: µ new t * = v∈T i=1.... p(t i = t * | v) × v w i v∈T i=1.... p(t i = t * | v) (3) where T is a data set of word embedding sequences v each of length |v| = , and p(t i = t * | v) is the posterior probability of label t * at position i in the sequence v. Likewise the update to Σ t * is: Σ new t * = v∈T i=1.... p(t i = t * | v) × δδ v∈T i=1.... p(t i = t * | v) (4) where δ = v w i − µ new t * .

Conditional Random Field Autoencoders

The second class of models this work extends is called CRF autoencoders, which we recently proposed in (Ammar et al., 2014). It is a scalable family of models for feature-rich learning from unlabeled examples. The model conditions on one copy of the structured input, and generates a reconstruction of the input via a set of interdependent latent variables which represent the linguistic structure of interest . As shown in Eq. 5, the model factorizes into two distinct parts: the encoding model p(t | w) and the reconstruction model p( ˆ w | t); where w is the structured input (e.g., a token sequence), t is the linguistic structure of interest (e.g., a sequence of POS tags), andˆw is a generic reconstruction of the input. For POS induction, the encoding model is a linearchain CRF with feature vector λ and local feature functions f . p( ˆ w,t | w) = p(t | w) × p( ˆ w | t) ∝ p( ˆ w | t) × exp λ · |w| i=1 f (t i , t i−1 , w) (5) In (Ammar et al., 2014), we explored two kinds of reconstructionsˆw : surface forms and Brown clusters (Brown et al., 1992), and used " stupid multinomials " as the underlying distributions for re- generatingˆw .

Gaussian Reconstruction.

In this paper, we use d-dimensional word embedding reconstructionsˆw i = v w i ∈ R d , and replace the multinomial distribution of the reconstruction model with the multivariate Gaussian distribution in Eq. 2. We again use the Baum–Welch algorithm to estimate µ t * and Σ t * similar to Eq. 3. The only difference is that posterior label probabilities are now conditional on both the input sequence w and the embeddings sequence v, i.e., replace p(t i = t * | v) in Eq. 2 with p(t i = t * | w, v).

Experiments

In this section, we attempt to answer the following questions: Baseline: HMM with log-linear emissions (Berg- Kirkpatrick et al., 2010), • Baseline: CRF autoencoder with multinomial reconstructions (Ammar et al., 2014), 7 • Proposed: HMM with Gaussian emissions, and • Proposed: CRF autoencoder with Gaussian recon- structions.

Data.

To train the POS induction models, we used the plain text from the training sections of the CoNLL-X shared task (Buchholz and Marsi, 2006 ) (for Zulu). For evaluation, we obtain the corresponding gold-standard POS tags by deterministically mapping the language-specific POS tags in the aforementioned corpora to the corresponding universal POS tag set (Petrov et al., 2012). This is the same set up we used in (Ammar et al., 2014).

Setup.

In this section, we used skip-gram (i.e., word2vec) embeddings with a context window size = 1 and with dimensionality d = 100, trained with the largest corpora for each language in (Quasthoff et al., 2006), in addition to the plain Arabic Basque Danish Greek Hungarian Italian Turkish Zulu Average V−measure 0.0 0.2 0.4 0.6 0.8 Multinomial HMM Figure 1: POS induction results. (V-measure, higher is better.) Window size is 1 for all word embeddings. Left: Models which use standard skip-gram word embeddings (i.e., Gaussian HMM and Gaussian CRF Autoencoder) outperform all baselines on average across languages. Right: comparison between standard and structured skip-grams on Gaussian HMM and CRF Autoencoder. text used to train the POS induction models. 8 In the proposed models, we only show results for estimating µ t , assuming a diagonal covariance matrix Σ t (k, k) = 0.45∀k ∈ {1, . . . , d}. 9 While the CRF autoencoder with multinomial reconstructions were carefully initialized as discussed in (Ammar et al., 2014), CRF autoencoder with Gaussian reconstructions were initialized uniformly at random in [−1, 1]. All HMM models were also randomly initialized . We tuned all hyperparameters on the English PTB corpus, then fixed them for all languages. Evaluation. We use the V-measure evaluation metric (Rosenberg and Hirschberg, 2007) to evaluate the predicted syntactic classes at the token level. 10 Results. The results in Fig. 1 (left) clearly suggest that we can use word embeddings to improve POS induction. Surprisingly, the feature-less Gaussian HMM model outperforms the strong featurerich baselines: Multinomial Featurized HMM and Multinomial CRF Autoencoder. One explanation is that our word embeddings were induced using larger unlabeled corpora than those used to train the POS induction models. The best results are obtained using both word embeddings and feature-rich models using the Gaussian CRF autoencoder model. This set of results suggest that word embeddings and hand-engineered features play complementary roles in POS induction. It is worth noting that the CRF autoencoder model with Gaussian reconstructions did not require careful initialization. 11

Choice of Embeddings

Standard skip-gram vs. structured skip-gram. On Gaussian HMMs, structured skip-gram embeddings score moderately higher than standard skipgrams . And as the context window size gets larger the gap widens. The reason may be that structured skip-gram embeddings give each position within the context window its own project matrix, so the smearing effect is not as pronounced as the window grows when compared to the standard embeddings. However the best performance is still obtained when the window is small. 12 11 In (Ammar et al., 2014), we found that careful initialization for the CRF autoencoder model with multinomial reconstructions is necessary.

12

In preliminary experiments, we also compared standard skip-gram embeddings to SENNA embeddings (Collobert et al., 2011) (which are trained in a semi-supervised multi-task learning setup, with one task being POS tagging) on a subset of the English PTB corpus. As expected, the induced POS tags 2 4 8 16 Window size avg. V−measure 0.30 0.45 standard skip−gram structured skip−gram Figure 2: Effect of window size and embeddings type on POS induction over the languages in Fig. 1. d = 100. The model is HMM with Gaussian emis- sions. Dimensions = 20 vs. 200. We also varied the number of dimensions in the word vectors (d ∈ {20, 50, 100, 200}). The best V-measure we obtain is 0.504 (d = 20) and the worst is 0.460 (d = 100). However, we did not observe a consistent pattern as shown in Fig. 3. Window size = 1 vs. 16. Finally, we varied the window size for the context surrounding target words (w ∈ {1, 2, 4, 8, 16}). w = 1 yields the best average V-measure across the eight languages as shown in Fig. 2. This is true for both standard and structured skip-gram models. Notably, larger window sizes appear to produce word embeddings with less syntactic information. This result confirms the observations of Bansal et al. (2014).

Discussion

We have shown that (re)generating word embeddings does much better than generating opaque word types in unsupervised POS induction. At a high level, this confirms prior findings that unsupervised word embeddings capture syntactic properties of words, and shows that different embeddings capture more syntactically salient information than others. As such, we contend that unsupervised POS induction can be seen as a diagnostic metric for assessing the syntactic quality of embeddings. To get a better understanding of what the multivariate Gaussian models have learned, we conduct a hill-climbing experiment on our English dataset. We are much better when using SENNA embeddings, yielding a Vmeasure score of 0.57 compared to 0.51 for skip-gram embeddings . Since SENNA embeddings are only available in English, we did not include it in the comparison in Fig. 1 . 20 50 100 200 Dimension size V−measure 0.30 0.45 Figure 3: Effect of

dimension

size on POS induction on a subset of the English PTB corpus. w = 1. The model is HMM with Gaussian emissions. seed each POS category with the average vector of 10 randomly sampled words from that category and train the model. Seeding unsurprisingly improves tagging performance. We also find words that are the nearest to the centroids generally agree with the correct category label, which validate our assumption that syntactically similar words tend to cluster in the high-dimensional embedding space. It also shows that careful initialization of model parameters can bring further improvements. However we also find that words that are close to the centroid are not necessarily representative of what linguists consider to be prototypical. For example, Hopper and Thompson (1983) show that physical, telic, past tense verbs are more prototypical with respect to case marking, agreement, and other syntactic behavior. However, the verbs nearest our centroid all seem rather abstract. In English, the nearest 5 words in the verb category are entails, aspires, attaches, foresees, deems. This may be because these words seldom serve functions other than verbs; and placing the centroid around them incurs less penalty (in contrast to physical verbs, e.g. bite, which often also act as nouns). Therefore one should be cautious in interpreting what is prototypical about them.

Conclusion

We propose using a multivariate Gaussian model to generate vector space representations of observed words in generative or hybrid models for POS induction , as a superior alternative to using multinomial distributions to generate categorical word types. We find the performance from a simple Gaussian HMM competitive with strong feature-rich baselines. We further show that substituting the emission part of the CRF autoencoder can bring further improvements . We also confirm previous findings which suggest that smaller context windows in skip-gram models result in word embeddings which encode more syntactic information. It would be interesting to see if we can apply this approach to other tasks which require generative modeling of textual observations such as language modeling and grammar in- duction.