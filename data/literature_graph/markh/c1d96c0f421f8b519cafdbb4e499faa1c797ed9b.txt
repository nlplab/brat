Title: Transition-based Dependency Parsing with Rich Non-local Features

Abstract: Transition-based dependency parsers generally use heuristic decoding algorithms but can accommodate arbitrarily rich feature representations. In this paper, we show that we can improve the accuracy of such parsers by considering even richer feature sets than those employed in previous systems. In the standard Penn Treebank setup, our novel features improve attachment score form 91.4% to 92.9%, giving the best results so far for transition-based parsing and rivaling the best results overall. For the Chinese Treebank, they give a signficant improvement of the state of the art. An open source release of our parser is freely available.

Content: Introduction

Transition-based dependency parsing (Yamada and Matsumoto, 2003; Nivre et al., 2006b; Zhang and Clark, 2008; Huang and Sagae, 2010) utilize a deterministic shift-reduce process for making structural predictions. Compared to graph-based dependency parsing, it typically offers linear time complexity and the comparative freedom to define non-local features , as exemplified by the comparison between MaltParser and MSTParser (Nivre et al., 2006b; Mc- Donald et al., 2005; McDonald and Nivre, 2007). Recent research has addressed two potential disadvantages of systems like MaltParser. In the aspect of decoding, beam-search (Johansson and Nugues, 2007; Zhang and Clark, 2008; Huang et al., 2009) and partial dynamic-programming (Huang and Sagae, 2010) have been applied to improve upon greedy one-best search, and positive results were reported . In the aspect of training, global structural learning has been used to replace local learning on each decision (Zhang and Clark, 2008; Huang et al., 2009), although the effect of global learning has not been separated out and studied alone. In this short paper, we study a third aspect in a statistical system: feature definition. Representing the type of information a statistical system uses to make predictions, feature templates can be one of the most important factors determining parsing accuracy . Various recent attempts have been made to include non-local features into graph-based dependency parsing (Smith and Eisner, 2008; Martins et al., 2009; Koo and Collins, 2010). Transitionbased parsing, by contrast, can easily accommodate arbitrarily complex representations involving nonlocal features. Complex non-local features, such as bracket matching and rhythmic patterns, are used in transition-based constituency parsing (Zhang and Clark, 2009; Wang et al., 2006), and most transitionbased dependency parsers incorporate some nonlocal features, but current practice is nevertheless to use a rather restricted set of features, as exemplified by the default feature models in MaltParser (Nivre et al., 2006a). We explore considerably richer feature representations and show that they improve parsing accuracy significantly. In standard experiments using the Penn Treebank, our parser gets an unlabeled attachment score of 92.9%, which is the best result achieved with a transition-based parser and comparable to the state of the art. For the Chinese Treebank, our parser gets a score of 86.0%, the best reported result so far.

2 The Transition-based Parsing Algorithm

In a typical transition-based parsing process, the input words are put into a queue and partially built structures are organized by a stack. A set of shiftreduce actions are defined, which consume words from the queue and build the output parse. Recent research have focused on action sets that build projective dependency trees in an arc-eager (Nivre et al., 2006b; Zhang and Clark, 2008) or arc-standard (Yamada and Matsumoto, 2003; Huang and Sagae, 2010) process. We adopt the arc-eager system 1 , for which the actions are: • Shift, which removes the front of the queue and pushes it onto the top of the stack; • Reduce, which pops the top item off the stack; • LeftArc, which pops the top item off the stack, and adds it as a modifier to the front of the queue; • RightArc, which removes the front of the queue, pushes it onto the stack and adds it as a modifier to the top of the stack. Further, we follow Zhang and Clark (2008) and Huang et al. (2009) and use the generalized perceptron (Collins, 2002) for global learning and beamsearch for decoding. Unlike both earlier globallearning parsers, which only perform unlabeled parsing, we perform labeled parsing by augmenting the LeftArc and RightArc actions with the set of dependency labels. Hence our work is in line with Titov and Henderson (2007) in using labeled transitions with global learning. Moreover, we will see that label information can actually improve link ac- curacy.

Feature Templates

At each step during a parsing process, the parser configuration can be represented by a tuple S, N, A, where S is the stack, N is the queue of incoming words, and A is the set of dependency arcs that have been built. Denoting the top of stack 1 It is very likely that the type of features explored in this paper would be beneficial also for the arc-standard system, although the exact same feature templates would not be applicable because of differences in the parsing order. from single words S 0 wp; S 0 w; S 0 p; N 0 wp; N 0 w; N 0 p; N 1 wp; N 1 w; N 1 p; N 2 wp; N 2 w; N 2 p; from word pairs S 0 wpN 0 wp; S 0 wpN 0 w; S 0 wN 0 wp; S 0 wpN 0 p; S 0 pN 0 wp; S 0 wN 0 w; S 0 pN 0 p N 0 pN 1 p from three words N 0 pN 1 pN 2 p; S 0 pN 0 pN 1 p; S 0h pS 0 pN 0 p; S 0 pS 0l pN 0 p; S 0 pS 0r pN 0 p; S 0 pN 0 pN 0l p Table 1: Baseline feature templates. w – word; p – POS-tag. distance S 0 wd; S 0 pd; N 0 wd; N 0 pd; S 0 wN 0 wd; S 0 pN 0 pd; valency S 0 wv r ; S 0 pv r ; S 0 wv l ; S 0 pv l ; N 0 wv l ; N 0 pv l ; unigrams S 0h w; S 0h p; S 0 l; S 0l w; S 0l p; S 0l l; S 0r w; S 0r p; S 0r l;N 0l w; N 0l p; N 0l l; third-order S 0h2 w; S 0h2 p; S 0h l; S 0l2 w; S 0l2 p; S 0l2 l; S 0r2 w; S 0r2 p; S 0r2 l; N 0l2 w; N 0l2 p; N 0l2 l; S 0 pS 0l pS 0l2 p; S 0 pS 0r pS 0r2 p; S 0 pS 0h pS 0h2 p; N 0 pN 0l pN 0l2 p; label set S 0 ws r ; S 0 ps r ; S 0 ws l ; S 0 ps l ; N 0 ws l ; N 0 ps l ; Table 2: New feature templates. w – word; p – POS-tag; v l , v r – valency; l – dependency label, s l , s r – labelset. with S 0 , the front items from the queue with N 0 , N 1 , and N 2 , the head of S 0 (if any) with S 0h , the leftmost and rightmost modifiers of S 0 (if any) with S 0l and S 0r , respectively, and the leftmost modifier of N 0 (if any) with N 0l , the baseline features are shown in Table 1. These features are mostly taken from Zhang and Clark (2008) and Huang and Sagae (2010), and our parser reproduces the same accuracies as reported by both papers. In this table, w and p represents the word and POS-tag, respectively. For example, S 0 pN 0 wp represents the feature template that takes the word and POS-tag of N 0 , and combines it with the word of S 0 .

189

In this short paper, we extend the baseline feature templates with the following:

Distance between

S 0 and N 0 Direction and distance between a pair of head and modifier have been used in the standard feature templates for maximum spanning tree parsing (Mc- Donald et al., 2005). Distance information has also been used in the easy-first parser of (Goldberg and Elhadad, 2010). For a transition-based parser, direction information is indirectly included in the LeftArc and RightArc actions. We add the distance between S 0 and N 0 to the feature set by combining it with the word and POS-tag of S 0 and N 0 , as shown in Table 2. It is worth noticing that the use of distance information in our transition-based model is different from that in a typical graph-based parser such as MSTParser. The distance between S 0 and N 0 will correspond to the distance between a pair of head and modifier when an LeftArc action is taken, for example, but not when a Shift action is taken.

Valency of

S 0 and N 0 The number of modifiers to a given head is used by the graph-based submodel of Zhang and Clark (2008) and the models of Martins et al. (2009) and Sagae and Tsujii (2007). We include similar information in our model. In particular, we calculate the number of left and right modifiers separately, calling them left valency and right valency, respectively. Left and right valencies are represented by v l and v r in Table 2, respectively. They are combined with the word and POS-tag of S 0 and N 0 to form new feature templates. Again, the use of valency information in our transition-based parser is different from the aforementioned graph-based models. In our case, valency information is put into the context of the shift-reduce process, and used together with each action to give a score to the local decision.

Unigram information for

S 0h , S 0l , S 0r and N 0l The head, left/rightmost modifiers of S 0 and the leftmost modifier of N 0 have been used by most arc-eager transition-based parsers we are aware of through the combination of their POS-tag with information from S 0 and N 0 . Such use is exemplified by the feature templates " from three words " in Table 1. We further use their word and POS-tag information as " unigram " features in Table 2. Moreover, we include the dependency label information in the unigram features, represented by l in the table. Unigram label information has been used in MaltParser (Nivre et al., 2006a; Nivre, 2006).

Third-order features of

S 0 and N 0 Higher-order context features have been used by graph-based dependency parsers to improve accuracies (Carreras, 2007; Koo and Collins, 2010). We include information of third order dependency arcs in our new feature templates, when available. In Table 2, S 0h2 , S 0l2 , S 0r2 and N 0l2 refer to the head of S 0h , the second leftmost modifier and the second rightmost modifier of S 0 , and the second leftmost modifier of N 0 , respectively. The new templates include unigram word, POS-tag and dependency labels of S 0h2 , S 0l2 , S 0r2 and N 0l2 , as well as POS-tag combinations with S 0 and N 0 .

Set of dependency labels with

S 0 and N 0 As a more global feature, we include the set of unique dependency labels from the modifiers of S 0 and N 0 . This information is combined with the word and POS-tag of S 0 and N 0 to make feature templates. In Table 2 , s l and s r stands for the set of labels on the left and right of the head, respectively.

Experiments

Our experiments were performed using the Penn Treebank (PTB) and Chinese Treebank (CTB) data. We follow the standard approach to split PTB3, using sections 2 – 21 for training, section 22 for development and 23 for final testing. Bracketed sentences from PTB were transformed into dependency formats using the Penn2Malt tool. 2 Following Huang and Sagae (2010), we assign POS-tags to the training data using ten-way jackknifing. We used our implementation of the Collins (2002) tagger (with 97.3% accuracy on a standard Penn Treebank test) to perform POS-tagging. For all experiments, we set the beam size to 64 for the parser, and report unlabeled and labeled attachment scores (UAS, LAS) and unlabeled exact match (UEM) for evaluation. beled attachment score; UEM = unlabeled exact match; LAS = labeled attachment score.

Development Experiments

Table 3 shows the effect of new features on the development test data for English. We start with the baseline features in Table 1, and incrementally add the distance, valency, unigram, third-order and label set feature templates in Table 2. Each group of new feature templates improved the accuracies over the previous system, and the final accuracy with all new features was 93.14% in unlabeled attachment score.

Final Test Results

Table 4 shows the final test results of our parser for English. We include in the table results from the pure transition-based parser of Zhang and Clark (2008) (row 'Z&C08 transition'), the dynamic-programming arc-standard parser of Huang and Sagae (2010) (row 'H&S10'), and graphbased models including MSTParser (McDonald and Pereira, 2006), the baseline feature parser of Koo et al. (2008) (row 'K08 baeline'), and the two models of Koo and Collins (2010). Our extended parser significantly outperformed the baseline parser, We take the standard split of CTB and use gold segmentation and POS-tags for the input. Our scores for this test set are the best reported so far and significantly better than the previous systems.

Conclusion

We have shown that enriching the feature representation significantly improves the accuracy of our transition-based dependency parser. The effect of the new features appears to outweigh the effect of combining transition-based and graph-based models , reported by Zhang and Clark (2008), as well as the effect of using dynamic programming, as in- Huang and Sagae (2010). This shows that feature definition is a crucial aspect of transition-based pars- 191 ing. In fact, some of the new feature templates in this paper, such as distance and valency, are among those which are in the graph-based submodel of Zhang and Clark (2008), but not the transition-based submodel . Therefore our new features to some extent achieved the same effect as their model tion. The new features are also hard to use in dynamic programming because they add considerable complexity to the parse items. Enriched feature representations have been studied as an important factor for improving the accuracies of graph-based dependency parsing also. Recent research including the use of loopy belief network (Smith and Eisner, 2008 ), integer linear programming (Martins et al., 2009) and an improved dynamic programming algorithm (Koo and Collins, 2010) can be seen as methods to incorporate nonlocal features into a graph-based model. An open source release of our parser, together with trained models for English and Chinese, are freely available. 3