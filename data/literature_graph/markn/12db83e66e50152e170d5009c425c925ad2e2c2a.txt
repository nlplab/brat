Title: Reasoning about Entailment with Neural Attention

Abstract: While most approaches to automatically recognizing entailment relations have used classifiers employing hand engineered features derived from complex natural language processing pipelines, in practice their performance has been only slightly better than bag-of-word pair classifiers using only lexical similarity. The only attempt so far to build an end-to-end differentiable neural network for en-tailment failed to outperform such a simple similarity classifier. In this paper, we propose a neural model that reads two sentences to determine entailment using long short-term memory units. We extend this model with a word-byword neural attention mechanism that encourages reasoning over entailments of pairs of words and phrases. Furthermore, we present a qualitative analysis of attention weights produced by this model, demonstrating such reasoning capabilities. On a large entailment dataset this model outperforms the previous best neural model and a classifier with engineered features by a substantial margin. It is the first generic end-to-end differentiable system that achieves state-of-the-art accuracy on a tex-tual entailment dataset.

Content: METHODS

In this section we discuss LSTMs ( §2.1) and describe how they can be applied to RTE ( §2.2). We introduce an extension of an LSTM for RTE with neural attention ( §2.3) and word-by-word attention ( §2.4). Finally, we show how such attentive models can easily be used for attending both ways: over the premise conditioned on the hypothesis and over the hypothesis conditioned on the premise ( §2.5).

LSTMS

Recurrent neural networks (RNNs) with long short-term memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have been successfully applied to a wide range of NLP tasks, such as machine translation (Sutskever et al., 2014), constituency parsing (Vinyals et al., 2014), language modeling (Zaremba et al., 2014) and recently RTE (Bowman et al., 2015). LSTMs encompass memory cells that can store information for a long period of time, as well as three types of gates that control the flow of information into and out of these cells: input gates (Eq. 2), forget gates (Eq. 3) and output gates (Eq. 4). Given an input vector x t at time step t, the previous output h t−1 and cell state c t−1 , an LSTM with hidden size k computes the next output h t and cell state c t as H = x t h t−1 (1) i t = σ(W i H + b i ) (2) f t = σ(W f H + b f ) (3) o t = σ(W o H + b o ) (4) c t = f t c t−1 + i t tanh(W c H + b c ) (5) h t = o t tanh(c t ) (6) where W i , W f , W o , W c ∈ R 2k×k are trained matrices and b i , b f , b o , b c ∈ R k trained biases that parameterize the gates and transformations of the input, σ denotes the element-wise application of the sigmoid function and the element-wise multiplication of two vectors. 2.2 RECOGNIZING TEXTUAL ENTAILMENT WITH LSTMS LSTMs can readily be used for RTE by independently encoding the premise and hypothesis as dense vectors and taking their concatenation as input to an MLP classifier (Bowman et al., 2015). This demonstrates that LSTMs can learn semantically rich sentence representations that are suitable for determining textual entailment. 2.2.1 CONDITIONAL ENCODING In contrast to learning sentence representations, we are interested in neural models that read both sentences to determine entailment, thereby reasoning over entailments of pairs of words and phrases. Figure 1 shows the high-level structure of this model. The premise (left) is read by an LSTM. A second LSTM with different parameters is reading a delimiter and the hypothesis (right), but its memory Published as a conference paper at ICLR 2016 x 1 c 1 h 1 x 2 c 2 h 2 x 3 c 3 h 3 x 4 c 4 h 4 x 5 c 5 h 5 x 6 c 6 h 6 x 7 c 7 h 7 x 8 c 8 h 8 x 9 c 9 h

9

A wedding party taking pictures :: Someone got married Figure 1: Recognizing textual entailment

using

(A) conditional encoding via two LSTMs, one over the premise and one over the hypothesis conditioned on the representation of the premise (c 5 ), (B) attention only based on the last output vector (h 9 ) or (C) word-by-word attention based on all output vectors of the hypothesis (h 7 , h 8 and h 9 ). state is initialized with the last cell state of the previous LSTM (c 5 in the example), i.e. it is conditioned on the representation that the first LSTM built for the premise (A). We use word2vec vectors (Mikolov et al., 2013) as word representations, which we do not optimize during training. Out-ofvocabulary words in the training set are randomly initialized by sampling values uniformly from (−0.05, 0.05) and optimized during training. 1 Out-of-vocabulary words encountered at inference time on the validation and test corpus are set to fixed random vectors. By not tuning representations of words for which we have word2vec vectors, we ensure that at inference time their representation stays close to unseen similar words for which we have word2vec embeddings. We use a linear layer to project word vectors to the dimensionality of the hidden size of the LSTM, yielding input vectors x i . Finally, for classification we use a softmax layer over the output of a non-linear projection of the last output vector (h 9 in the example) into the target space of the three classes (ENTAILMENT, NEUTRAL or CONTRADICTION), and train using the cross-entropy loss.

ATTENTION

Attentive neural networks have recently demonstrated success in a wide range of tasks ranging from handwriting synthesis (Graves, 2013), digit classification (Mnih et al., 2014), machine translation (Bahdanau et al., 2015), image captioning (Xu et al., 2015), speech recognition (Chorowski et al., 2015) and sentence summarization (Rush et al., 2015), to geometric reasoning (Vinyals et al., 2015). The idea is to allow the model to attend over past output vectors (see Figure 1 B), thereby mitigating the LSTM's cell state bottleneck. More precisely, an LSTM with attention for RTE does not need to capture the whole semantics of the premise in its cell state. Instead, it is sufficient to output vectors while reading the premise and accumulating a representation in the cell state that informs the second LSTM which of the output vectors of the premise it needs to attend over to determine the RTE class. Let Y ∈ R k×L be a matrix consisting of output vectors [h 1 · · · h L ] that the first LSTM produced when reading the L words of the premise, where k is a hyperparameter denoting the size of embeddings and hidden layers. Furthermore, let e L ∈ R L be a vector of 1s and h N be the last output vector after the premise and hypothesis were processed by the two LSTMs respectively. The attention mechanism will produce a vector α of attention weights and a weighted representation r of the premise via M = tanh(W y Y + W h h N ⊗ e L ) M ∈ R k×L (7) α = softmax(w T M) α ∈ R L (8) r = Yα T r ∈ R k (9) Published as a conference paper at ICLR 2016 where W y , W h ∈ R k×k are trained projection matrices, w ∈ R k is a trained parameter vector and w T denotes its transpose. Note that the outer product W h h N ⊗ e L is repeating the linearly transformed h N as many times as there are words in the premise (i.e. L times). Hence, the intermediate attention representation m i (ith column vector in M) of the ith word in the premise is obtained from a non-linear combination of the premise's output vector h i (ith column vector in Y) and the transformed h N . The attention weight for the ith word in the premise is the result of a weighted combination (parameterized by w) of values in m i . The final sentence-pair representation is obtained from a non-linear combination of the attentionweighted representation r of the premise and the last output vector h N using For determining whether one sentence entails another it can be a good strategy to check for entailment or contradiction of individual word-and phrase-pairs. To encourage such behavior we employ neural word-by-word attention similar to Bahdanau et al. (2015), Hermann et al. (2015) and Rush et al. (2015). The difference is that we do not use attention to generate words, but to obtain a sentence-pair encoding from fine-grained reasoning via soft-alignment of words and phrases in the premise and hypothesis. In our case, this amounts to attending over the first LSTM's output vectors of the premise while the second LSTM processes the hypothesis one word at a time, thus generating attention weight-vectors α t over all output vectors of the premise for every word x t with t ∈ (L + 1, N ) in the hypothesis (Figure 1 C). This can be modeled as follows: M t = tanh(W y Y + (W h h t + W r r t−1 ) ⊗ e L ) M t ∈ R k×L (11) α t = softmax(w T M t ) α t ∈ R L (12) r t = Yα T t + tanh(W t r t−1 ) r t ∈ R k (13) Note that r t is dependent on the previous attention representation r t−1 to inform the model about what was attended over in the previous step (see Eq. 11 and 13). As in the previous section, the final sentence-pair representation is obtained from a non-linear combination of the last attention-weighted representation of the premise (here based on the last word of the hypothesis ) r N and the last output vector using h * = tanh(W p r N + W x h N ) h * ∈ R k (14) 2.5 TWO-WAY ATTENTION Inspired by bidirectional LSTMs that read a sequence and its reverse for improved encoding (Graves and Schmidhuber, 2005), we introduce two-way attention for RTE. The idea is to use the same model (i.e. same structure and weights) to attend over the premise conditioned on the hypothesis, as well as to attend over the hypothesis conditioned on the premise, by simply swapping the two sequences. This produces two sentence-pair representations that we concatenate for classification.

EXPERIMENTS

We conduct experiments on the Stanford Natural Language Inference corpus (SNLI, Bowman et al., 2015). This corpus is two orders of magnitude larger than other existing RTE corpora such as Sentences Involving Compositional Knowledge (SICK, Marelli et al., 2014). Furthermore, a large part of training examples in SICK were generated heuristically from other examples. In contrast, all sentence-pairs in SNLI stem from human annotators. The size and quality of SNLI make it a suitable resource for training neural architectures such as the ones proposed in this paper. We use ADAM (Kingma and Ba, 2015) for optimization with a first momentum coefficient of 0.9 and a second momentum coefficient of 0.999.

2

For every model we perform a small grid search Published as a conference paper at ICLR 2016 Table 1: Results on the SNLI corpus. over combinations of the initial learning rate [1E-4, 3E-4, 1E-3], dropout 3 [0.0, 0.1, 0.2] and 2 regularization strength [0.0, 1E-4, 3E-4, 1E-3]. Subsequently, we take the best configuration based on performance on the validation set, and evaluate only that configuration on the test set.

RESULTS AND DISCUSSION

Results on the SNLI corpus are summarized in Table 1. The total number of model parameters, including tunable word representations, is denoted by |θ| W+M (without word representations |θ| M ). To ensure a comparable number of parameters to Bowman et al.'s model that encodes the premise and hypothesis independently using one LSTM, we also run experiments for conditional encoding where the parameters of both LSTMs are shared ( " Conditional encoding, shared " with k = 100) as opposed to using two independent LSTMs. In addition, we compare our attentive models to two benchmark LSTMs whose hidden sizes were chosen so that they have at least as many parameters as the attentive models. Since we are not tuning word vectors for which we have word2vec embeddings, the total number of parameters |θ| W+M of our models is considerably smaller. We also compare our models against the benchmark lexicalized classifier used by Bowman et al., which constructs features from the BLEU score between the premise and hypothesis, length difference, word overlap, uni-and bigrams, part-of-speech tags, as well as cross uni-and bigrams. Conditional Encoding We found that processing the hypothesis conditioned on the premise instead of encoding each sentence independently gives an improvement of 3.3 percentage points in accuracy over Bowman et al.'s LSTM. We argue this is due to information being able to flow from the part of the model that processes the premise to the part that processes the hypothesis. Specifically , the model does not waste capacity on encoding the hypothesis (in fact it does not need to encode the hypothesis at all), but can read the hypothesis in a more focused way by checking words and phrases for contradictions and entailments based on the semantic representation of the premise. One interpretation is that the LSTM is approximating a finite-state automaton for RTE (cf. Angeli and Manning, 2014). Another difference to Bowman et al.'s model is that we are using word2vec instead of GloVe for word representations and, more importantly, do not fine-tune these word embeddings . The drop in accuracy from train to test set is less severe for our models, which suggest that fine-tuning word embeddings could be a cause of overfitting. Our LSTM outperforms a simple lexicalized classifier by 2.7 percentage points. To the best of our knowledge, this is the first instance of a neural end-to-end differentiable model to achieve state-ofthe-art performance on a textual entailment dataset.

Attention

By incorporating an attention mechanism we found a 0.9 percentage point improvement over a single LSTM with a hidden size of 159, and a 1.4 percentage point increase over a benchmark model that uses two LSTMs for conditional encoding (one for the premise and one for the hypothesis conditioned on the representation of the premise). The attention model produces output vectors Published as a conference paper at ICLR 2016 (a) (b) (c) (d) Figure 2: Attention visualizations. summarizing contextual information of the premise that is useful to attend over later when reading the hypothesis. Therefore, when reading the premise, the model does not have to build up a semantic representation of the whole premise, but instead a representation that helps attending over the right output vectors when processing the hypothesis. In contrast, the output vectors of the premise are not used by the benchmark LSTMs. Thus, these models have to build up a representation of the whole premise and carry it over through the cell state to the part that processes the hypothesis—a bottleneck that can be overcome to some degree by using attention. Word-by-word Attention Enabling the model to attend over output vectors of the premise for every word in the hypothesis yields another 1.2 percentage point improvement compared to attending based only on the last output vector of the premise. We argue that this is due to the model being able to check for entailment or contradiction of individual words and phrases in the hypothesis, and demonstrate this effect in the qualitative analysis below. Two-way Attention Allowing the model to also attend over the hypothesis based on the premise does not seem to improve performance for RTE. We suspect that this is due to entailment being an asymmetric relation. Hence, using the same LSTM to encode the hypothesis (in one direction) and the premise (in the other direction) might lead to noise in the training signal. This could be addressed by training different LSTMs at the cost of doubling the number of model parameters.

QUALITATIVE ANALYSIS

It is instructive to analyze which output representations the model is attending over when deciding the class of an RTE example. Note that interpretations based on attention weights have to be taken with care since the model is not forced to solely rely on representations obtained from attention (see h N in Eq. 10 and 14). In the following we visualize and discuss the attention patterns of the presented attentive models. For each attentive model we hand-picked examples from ten randomly drawn samples of the validation set. Attention Figure 2 shows to what extent the attentive model focuses on contextual representations of the premise after both LSTMs processed the premise and hypothesis respectively. Note how the model pays attention to output vectors of words that are semantically coherent with the premise ( " riding " and " rides " , " animal " and " camel " , 2a) or in contradiction, as caused by a single word ( " blue " vs. " pink " , 2b) or multiple words ( " swim " and " lake " vs. " frolicking " and " grass " , 2c). Interestingly, the model shows contextual understanding by not attending over " yellow " , the color Published as a conference paper at ICLR 2016 (a) (b) (c) (d) (e) (f) (g) Figure 3: Word-by-word attention visualizations. Published as a conference paper at ICLR 2016 of the toy, but " pink " , the color of the coat. However, for more involved examples with longer premises we found that attention is more uniformly distributed (2d). This suggests that conditioning attention only on the last output has limitations when multiple words need to be considered for deciding the RTE class. Word-by-word Attention Visualizations of word-by-word attention are depicted in Figure 3. We found that word-by-word attention can easily detect if the hypothesis is simply a reordering of words in the premise (3a). Furthermore, it is able to resolve synonyms ( " airplane " and " aircraft " , 3c) and capable of matching multi-word expressions to single words ( " garbage can " to " trashcan " , 3b). It is also noteworthy that irrelevant parts of the premise, such as words capturing little meaning or whole uninformative relative clauses, are correctly neglected for determining entailment ( " which also has a rope leading out of it " , 3b). Word-by-word attention seems to also work well when words in the premise and hypothesis are connected via deeper semantics or common-sense knowledge ( " snow " can be found " outside " and a " mother " is an " adult " , 3e and 3g). Furthermore, the model is able to resolve one-to-many relationships ( " kids " to " boy " and " girl " , 3d) Attention can fail, for example when the two sentences and their words are entirely unrelated (3f). In such cases, the model seems to back up to attending over function words, and the sentence-pair representation is likely dominated by the last output vector (h N ) instead of the attention-weighted representation (see Eq. 14).

CONCLUSION

In this paper, we show how the state-of-the-art in recognizing textual entailment on a large, humancurated and annotated corpus, can be improved with general end-to-end differentiable models. Our results demonstrate that LSTM recurrent neural networks that read pairs of sequences to produce a final representation from which a simple classifier predicts entailment, outperform both a neural baseline as well as a classifier with hand-engineered features. Extending these models with attention over the premise provides further improvements to the predictive abilities of the system, resulting in a new state-of-the-art accuracy for recognizing entailment on the Stanford Natural Language Inference corpus. The models presented here are general sequence models, requiring no appeal to Natural Languagespecific processing beyond tokenization, and are therefore a suitable target for transfer learning through pre-training the recurrent systems on other corpora, and conversely, applying the models trained on this corpus to other entailment tasks. Future work will focus on such transfer learning tasks, as well as scaling the methods presented here to larger units of text (e.g. paragraphs and entire documents) using hierarchical attention mechanisms. Additionally, it would be worthwhile exploring how other, more structured forms of attention (e.g. Graves et al., 2014; Sukhbaatar et al., 2015), or other forms of differentiable memory (e.g. Grefenstette et al., 2015; Joulin and Mikolov, 2015) could help improve performance on RTE over the neural models presented in this paper. Furthermore, we aim to investigate the application of these generic models to non-natural language sequential entailment problems.